
#include <iostream>
using namespace std;


class BST {
    
    struct node
    {
       int data;
       node* left;
       node* right;
    };
    
    node* root;

    node* makeEmpty(node* t) {
        if (t == NULL)
            return NULL;
        {
            makeEmpty(t->left);
            makeEmpty(t->right);
            delete t;
        }
        return NULL;
    }

    //#################### START OF BLOCK ########################## //
    // You are only allowed to change the code in this block
    // If you remove, or add, or change anything above or below this block  (except Main() )
    // then you will be given ZERO marks (inarguable)




    // Your function should be written here
    node* _insert(int x, node* t)
    {
        if (t == NULL)
        {
            t = new node;
            t->data = x;
            t->left = t->right = NULL;
        }
        else if (x < t->data)
            t->left = _insert(x, t->left);
        else if (x > t->data)
            t->right = _insert(x, t->right);
        return t;
    }
    public:
//    void insert(int x) {
//        root = insert(x, root);
//    }
    node *getRoot(){
    	return root;
	}
	int _countNodes(node *root){
		if(root == NULL)
			return 0;
		return 1 + _countNodes(root->left) + _countNodes(root->right);
	}
	void strictNodes(node *root,int &i){
		if(root == NULL)
			return;
		if(root->left && root->right){
				i++;
		}
		if(root->left == NULL && root->right == NULL){
			i++;
		}
		strictNodes(root->left,i);
		strictNodes(root->right,i);
	}
	void insert_strict(int val){
		int i = 0;
		this->strictNodes(this->getRoot(),i);
		int n = this->_countNodes(this->getRoot());
		if(i >= n/2){
			root = this->_insert(val,this->getRoot());
		}else{
			cout << "can not insert "<< endl;
		}
		
	}
    // You are only allowed to change the code in this block
    // If you remove, or add, or change anything above or below this block
    // then you will be given ZERO marks (inarguable)
    //############## END OF BLOCK ###############################//

    node* findMin(node* t)
    {
        if (t == NULL)
            return NULL;
        else if (t->left == NULL)
            return t;
        else
            return findMin(t->left);
    }

    node* findMax(node* t) {
        if (t == NULL)
            return NULL;
        else if (t->right == NULL)
            return t;
        else
            return findMax(t->right);
    }

    node* remove(int x, node* t) {
        node* temp;
        if (t == NULL)
            return NULL;
        else if (x < t->data)
            t->left = remove(x, t->left);
        else if (x > t->data)
            t->right = remove(x, t->right);
        else if (t->left && t->right)
        {
            temp = findMin(t->right);
            t->data = temp->data;
            t->right = remove(t->data, t->right);
        }
        else
        {
            temp = t;
            if (t->left == NULL)
                t = t->right;
            else if (t->right == NULL)
                t = t->left;
            delete temp;
        }

        return t;
    }

    void inorder(node* t) {
        if (t == NULL)
            return;
        inorder(t->left);
        cout << t->data << " ";
        inorder(t->right);
    }

    node* find(node* t, int x) {
        if (t == NULL)
            return NULL;
        else if (x < t->data)
            return find(t->left, x);
        else if (x > t->data)
            return find(t->right, x);
        else
            return t;
    }

public:
    BST() {
        root = NULL;
    }

    ~BST() {
        root = makeEmpty(root);
    }

    void insert(int x) {
        root = _insert(x, root);
    }

    void remove(int x) {
        root = remove(x, root);
    }

    void display() {
        inorder(root);
        cout << endl;
    }

    void search(int x) {
        root = find(root, x);
    }
};


int main() {
    BST t;
  
    return 0;
}
